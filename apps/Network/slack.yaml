version: "3.8"

x-application:

  readme: |
    Slack: cloud-based team communication platform

    Use together with legacy-screenshare-helper (https://github.com/httk/legacy-screenshare-helper)
    to support screensharing.

  override-default: |
    version: "3.8"

    services:
      slack:
         volumes:
           - "${HOME}/Documents/containers/meetings:/home/${USER}/Documents/containers/meetings"
         working_dir: "/home/${USER}/Documents/containers/meetings"

  env-default: |
    # No configurable options


x-launchers:
  download:
    service: setup
    type: setup

    script: &download_script
      - echo "DOWNLOAD"
      - mkdir -p Downloads
      - LATESTURL="$$(curl -L 'https://slack.com/downloads/instructions/linux?ddl=1&build=deb' | sed -n 's|^.*src="\(https://downloads.slack-edge.com/desktop-releases/linux/x64/[^/]*/[^/]*-amd64.deb\).*$$|\1|p')"
      - LATESTFILENAME="$${LATESTURL##*/}"
      - if [ -z "$$LATESTFILENAME" ]; then
          echo "Failed to determine latest version.";
          exit 1;
        fi;
      - curl -L -o Downloads/$$LATESTFILENAME "$$LATESTURL" && ln -sf $$LATESTFILENAME Downloads/slack-latest-amd64.deb

  redownload:
    service: setup
    type: setup
    script: &redownload_script
      - echo "REDOWNLOAD"
      - rm -f "$$(readlink -f Downloads/slack-latest-amd64.deb)"
      - rm -f Downloads/slack-latest-amd64.deb
      - *download_script

  install:
    service: setup-nonet
    type: setup
    script: &install_script
      - VERSION="$${1:-slack-latest-amd64.deb}";
      - echo "INSTALL $$VERSION";
      - rm -rf ~/.local/share/slack &&
        mkdir ~/.local/share/slack &&
        cd ~/.local/share/slack &&
        dpkg-deb -x ~/Downloads/"$$VERSION" slack &&
        mkdir -p ~/.local/share/applications ~/.local/share/icons/hicolor/256x256/apps &&
        cp slack/usr/share/applications/slack.desktop ~/.local/share/applications/slack.desktop &&
        sed -i 's%/usr/bin/slack%/home/$USER/Installation/slack/usr/bin/slack%' ~/.local/share/applications/slack.desktop &&
        cp "slack/usr/share/pixmaps/slack.png" ~/.local/share/icons/hicolor/256x256/apps/slack.png &&
        gtk-update-icon-cache -f -t ~/.local/share/icons/hicolor &&
        update-desktop-database ~/.local/share/applications/

  reinstall:
    service: setup-nonet
    type: setup
    script: &reinstall_script
      - VERSION="$${1:-slack-latest-amd64.deb}";
      - echo "REINSTALL $$VERSION"
      - rm -rf ~/.local/share/slack
      - *install_script

  update-check:
    service: setup
    type: setup
    script: &update_check_script
      - echo "UPDATE CHECK"
      - LATESTURL="$$(curl -L 'https://slack.com/downloads/instructions/linux?ddl=1&build=deb' | sed -n 's|^.*src="\(https://downloads.slack-edge.com/desktop-releases/linux/x64/[^/]*/[^/]*-amd64.deb\).*$$|\1|p')"
      - LATESTFILENAME="$${LATESTURL##*/}";
      - if [ -z "$$LATESTFILENAME" ]; then
          echo "Failed to determine latest version.";
          exit 1;
      - fi
      - mkdir -p Downloads
      - if [ -e "Downloads/$$LATESTFILENAME" ]; then
          echo "No new version";
          exit 0;
        fi
      - echo "File missing, or server-side file newer"
      - exit 1

  update:
    service: setup
    type: setup
    script:
      - echo "UPDATE"
      - *redownload_script
      - *reinstall_script

  slack:
    service: run
    type: background
    auto-update: true
    script:
      - echo "SLACK"
      - pipewire-pulse &
      - exec ~/.local/share/slack/slack/usr/bin/slack $${CDC_OZONE_FLAGS} "$$@"

    desktop:

      file: |
        [Desktop Entry]
        Name=Slack (container)
        StartupWMClass=Slack
        Comment=Slack Desktop
        GenericName=Slack Client for Linux
        Exec=slack
        Icon=slack
        Type=Application
        StartupNotify=true
        Categories=Network;InstantMessaging;
        MimeType=x-scheme-handler/slack;

      icons:
        - source: slack.png
          dest: slack.png
        - source: slack/slack/usr/share/pixmaps/slack.png
          dest: slack/slack/usr/share/pixmaps/slack.png

  slack-wayland:
    service: run-wayland
    type: background
    script:
      - echo "SLACK"
      - pipewire-pulse &
      - |
        if [ -n "$WAYLAND_DISPLAY" ]; then
          export TMPDIR=/tmp/cdc/slack # this ugly workaround allows appindicator icons to be accessed by the host system
        fi
      - exec ~/.local/share/slack/slack/usr/bin/slack $${CDC_OZONE_FLAGS} "$$@"
    # Setting TMPDIR is a workaround to share 

  interactive:
    service: run-wayland
    console: true
    script:
      - echo "INTERACTIVE"
      - bash


services:

  common: &common

    image: "cdc-u24"

    entrypoint: ["/bin/tini", "/bin/bash", "--", "-c", "$$(printf \"%s\\n\" \"$@\"); sleep infinity"]
    network_mode: none

    working_dir: /home/$USER
    user: "${USER}"

    environment: &common-env
      LANG: "${LANG}"
      XDG_RUNTIME_DIR: "/tmp/${USER}/run"
      XDG_CURRENT_DESKTOP: "${XDG_CURRENT_DESKTOP}"
      DESKTOP_SESSION: "${DESKTOP_SESSION}"

    cap_drop:
      - ALL

    cap_add:
      - SYS_CHROOT

    security_opt:
      - no-new-privileges

    read_only: true
    tmpfs:
      - /tmp
      - /run

    shm_size: "1G"

    volumes:
      - "${CDC_APP_PATH}/home:/home/${USER}:rw"

    devices:
      - "/dev/dri:/dev/dri"

    security_opt:
      - no-new-privileges

    userns_mode: "keep-id"

  setup:
    <<: *common

    network_mode: bridge

  setup-nonet:
    <<: *common

    network_mode: none

  run:
    <<: *common

    network_mode: bridge

    x-features:
      - video
      - sound
      - x11

  # wayland support works quite well, but at least in Gnome generates some weird visual artifacts around the window
  # for what seems to be intended as a drop shadow. I have not found a way to get rid of it.
  run-wayland:
    <<: *common

    network_mode: bridge

    x-features:
      - video
      - sound
      - wayland
      - wayland-host-tmp-mount
      - dbus-proxy: --filter --call="org.freedesktop.portal.*=*" --talk=org.kde.StatusNotifierWatcher
