version: "3.8"

x-application:

  readme: |
    Discord: instant messaging and VoIP social platform.

    This container uses the x11 server on your desktop (i.e., likely xwayland if you are
    running Wayland), which is not great from a security barrier perspective.

    Use together with legacy-screenshare-helper (https://github.com/httk/legacy-screenshare-helper)
    to support screensharing.

  config-default: |
    version: "3.8"

  env-default: |
    # This container has no configurable options

services:

  ## COMMON PART ##

  common: &common

    image: "cdc-u24"

    working_dir: /home/$USER
    user: "${USER}"

    environment: &common-env
      LANG: "${LANG}"
      XDG_RUNTIME_DIR: "/tmp/${USER}/run"
      XDG_CURRENT_DESKTOP: "${XDG_CURRENT_DESKTOP}"

    cap_drop:
      - ALL
    cap_add:
      - SYS_CHROOT

    security_opt:
      - no-new-privileges

    read_only: true
    tmpfs:
      - /tmp
      - /run

    shm_size: "512m"

    volumes: &common-volumes
      - "${CDC_APP_DIR}/home:/home/${USER}:rw"

    devices:
      - "/dev/dri:/dev/dri"

    security_opt:
      - no-new-privileges

    userns_mode: "keep-id"

    network_mode: none

  ## INSTALL ##

  download: &download
    <<: *common

    network_mode: bridge

    environment:
      <<: *common-env

    # Discord doesn't keep track of versions via filenames. TODO: implement handling of this so old versions are kept.
    command:
      - echo "DOWNLOAD"
      - mkdir -p Downloads
      - curl -L -o Downloads/discord.tar.gz "https://discordapp.com/api/download?platform=linux&format=tar.gz"


  install: &install
    <<: *common

    command:
      - VERSION="$${1:-discord.tar.gz}";
      - echo "INSTALL $$VERSION";
      - rm -rf ~/Installation &&
        mkdir ~/Installation &&
        cd ~/Installation &&
        tar -xf ~/Downloads/"$$VERSION" &&
        mkdir -p ~/.local/share/applications &&
        cp Discord/discord.desktop ~/.local/share/applications/discord.desktop &&
        sed -i 's%/usr/share/discord/Discord%/home/$${USER}/discord/Discord/Discord%' ~/.local/share/applications/discord.desktop


  ## UPDATE ##

  update-check: &update-check
    <<: *common

    network_mode: bridge

    command:
      - echo "UPDATE CHECK"
      - mkdir -p Downloads
      - if [ -e Downloads/discord.tar.gz ]; then
          LASTMOD_LINE="$$(curl -sI -L "https://discordapp.com/api/download?platform=linux&format=tar.gz" | grep -i '^Last-Modified:' | cut "-d:" -f2- | sed 's/^\s*\|\s$$//g')";
          if [ -z "$$LASTMOD_LINE" ]; then
            echo "Could not get last modified date";
            exit 0;
          fi;
          REMOTE_TS="$$(date -d "$${LASTMOD_LINE}" +%s)";
          LOCAL_TS="$$(date -r "Downloads/discord.tar.gz" +%s)";
          if [ "$$REMOTE_TS" -lt "$$LOCAL_TS" ]; then
            echo "No new version";
            exit 0;
          fi;
        fi
      - echo "File missing, or server-side file newer"
      - exit 1

  update: &update
    <<: *install


  ## EXECUTE ###

  discord:
    <<: *common

    container_name: cdc_discord_discord

    network_mode: bridge

    x-app-features:
      - video
      - sound
      - x11

    command:
      - echo "DISCORD"
      - cd Installation/Discord
      - pipewire-pulse &
      - exec ./Discord "$$@"

    x-launcher:

      devices:
        - video

      desktop:

        file: |
          [Desktop Entry]
          Name=Discord (container)
          StartupWMClass=discord
          Comment=Internet Messenger
          Exec=discord %U
          Terminal=false
          Type=Application
          Icon=discord
          Categories=Network;InstantMessaging;
          MimeType=x-scheme-handler/discord;

        icons:
          - source: Installation/Discord/discord.png
            size: 256
            dest: discord.png

  ## INTERACTIVE ##

  interactive:
    <<: *common

    command:
      - echo "INTERACTIVE"
      - bash "$$@"
