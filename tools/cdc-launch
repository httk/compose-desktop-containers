#!/bin/bash
#
# Launch sets the following environment variables for use in docker-compose
#
#   CDC_APP_DIR: the application directory of the compose app
#   CDC_DBUS_PATH: the path to the unix socket used by dbus or dbus-proxy

set -e

SCRIPTPATH="$(dirname -- "$(realpath -- "$0")")"
LAUNCHPATH="$(cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P)"
TOOLPATH="$(dirname -- "$(realpath -- "$0")")"
PODMAN_RUN_ARGS=()
PODMAN_ARGS=()
INIT_COMMANDS=()
NAME_ARG=""

if [ -z "$(readlink "$0")" ]; then
    # Non-symlink invokation
    if [ "$1" == "-h" ]; then
	echo "Usage: $0 <action> [args ...]"
	echo
	echo "  action:"
	echo ""
	echo "    - exec: execute the app"
	echo "    - install: run the app installer"
	echo "    - interactive: give a command line prompt in the environment the app executes"
	echo "    - <custom>: apps may define custom actions, see README.md"
	echo ""
	exit 0
    fi
    ACTION="$1"
    shift 1
else
    # Symlink invokation
    ACTION=$(basename "$0")
    cd "$LAUNCHPATH"
fi

APP="$(basename -- "$(pwd -P)")"

if ! yq -r '."x-application"' compose.yaml > /dev/null 2>&1 || [ "$(yq -r '."x-application"' compose.yaml 2>/dev/null)" == "null" ]; then
    echo "=== Error dump ==="
    yq -r '."x-application"' compose.yaml && true
    echo "=================="

    echo "Something is wrong with the compose.yaml file (see error dump above)."
    exit 1
fi

PODMAN_CONFIG=$(podman-compose -f compose.yaml -f override.yaml config 2>/dev/null)

#PODMAN_RUN_ARGS="$PODMAN_RUN_ARGS --podman-run-args \"\\\--cap-add SYS_CHROOT \\\--cap-add CAP_FOWNER \\\--cap-add CAP_CHOWN \\\--cap-add CAP_DAC_OVERRIDE \\\--cap-add CAP_DAC_READ_SEARCH \\\--cap-add CAP_SETUID \\\--cap-add CAP_SETGID\""

# Workaround for podman arguments that I think really should work from the compose file, but for some reason does not?
RUN_USER="$(echo "$PODMAN_CONFIG" | yq -r ".services.\"$ACTION\".user")"
#if [ -n "$RUN_USER" -a "$RUN_USER" != "null" ]; then
#    PODMAN_RUN_ARGS+=("--user" "$RUN_USER")
#fi
#RUN_USER="$(echo "$PODMAN_CONFIG" | yq -r ".services.\"$ACTION\".user")"

CONFIG_FILE=()
if [ -e override.yaml ]; then
    CONFIG_FILE+=("-f" "override.yaml")
fi

ENV_FILE=()
if [ -e .env ]; then
    ENV_FILE+=("--env-file" ".env")
fi

if [ "$ACTION" == "interactive" ]; then
    PODMAN_ARGS+=("-it")
fi

# Look up container name
# Work around the fact that shared container_name does not really seem to be supported in podman-compose
# and leads to all kind of weird behavior.
CONTAINER_NAME="$(echo "$PODMAN_CONFIG" | yq -r ".services.\"$ACTION\".\"x-app-launcher\".container_name")"
if [ -z "$CONTAINER_NAME" -o "$CONTAINER_NAME" == "null" ]; then
    CONTAINER_NAME="$(echo "$PODMAN_CONFIG" | yq -r ".services.\"$ACTION\".container_name")"
fi
if [ -z "$CONTAINER_NAME" -o "$CONTAINER_NAME" == "null" ]; then
    CONTAINER_NAME="cdc_${APP}_${ACTION}"
fi
#    HOLD_COMMAND="; sleep infinity;"
#fi
echo "Container name: $CONTAINER_NAME"

export CDC_HOSTNAME=$(hostname)
# To avoid confusion in interactive mode we set a different hostname
# However, for .desktop-file mapping to work otherwise, we must use the same hostname (!)
if [ "$ACTION" = "interactive" ]; then
    CDC_HOSTNAME="cdc_${APP}_${ACTION}_container"
fi
echo "HOSTNAME: $CDC_HOSTNAME"

ADJUSTMENT_FILE=$(mktemp /tmp/desktop-containers-override.XXXXXX.yaml)
trap "rm -f '$ADJUSTMENT_FILE'" EXIT
cat <<EOF > "$ADJUSTMENT_FILE"
version: "3.8"
EOF

#cat <<EOF >> "$ADJUSTMENT_FILE"
#services:
#  $ACTION:
#    container_name: $CONTAINER_NAME
#EOF

if [ -z "$DBUS_SESSION_BUS_ADDRESS" ]; then
    export DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/${UID}/bus"
fi
export CDC_DBUS_PATH="${DBUS_SESSION_BUS_ADDRESS/unix:path=}"

if [ -z "$DBUS_SYSTEM_BUS_ADDRESS" ]; then
    export DBUS_SYSTEM_BUS_ADDRESS="unix:path=/run/dbus/system_bus_socket"
fi
export CDC_DBUS_SYSTEM_PATH="${DBUS_SESSION_BUS_ADDRESS/unix:path=}"

function GET_FEATURE_ARG() {
    FEATURE="$1"
    if [ -n "$2" ]; then
	ARGNAME=".\"$2\""
    else
	ARGNAME=""
    fi
    echo "$PODMAN_CONFIG" | yq -r ".services.\"$ACTION\".\"x-app-launcher\".features[]? | select(type==\"object\") | select(has(\"$FEATURE\"))| .\"$FEATURE\"${ARGNAME}"
}

ADJUSTMENT_ENVS=()
ADJUSTMENT_DEVS=()
ADJUSTMENT_VOLS=()
ADJUSTMENT_CAPS=()
OVERRIDE_ALLOW_READ="no"

# If compose file specifically uses x-app-init, we need to force CAP_SETUID + CAP_SETGID to start as root and then drop to user
if [ "$(echo "$PODMAN_CONFIG" | yq -r ".services.\"$ACTION\".\"x-app-launcher\".init")" != "null" ]; then
    ADJUSTMENT_CAPS+=( "CAP_SETUID" "CAP_SETGID" )
fi

if [ "$(echo "$PODMAN_CONFIG" | yq ".services.\"$ACTION\".\"x-app-launcher\".features")" != "null" ]; then
    for SERVICE in $(echo "$PODMAN_CONFIG" | yq -r ".services.\"$ACTION\".\"x-app-launcher\".features[]? | select(type==\"string\")") $(echo "$PODMAN_CONFIG" | yq -r ".services.\"${ACTION}\".\"x-app-launcher\".features[] | select(type==\"object\") | keys[]?"); do

	echo "Enabling service: $SERVICE"

	if [ "$SERVICE" = "wayland-fallback-x11" ]; then
	    if [ -n "$WAYLAND_DISPLAY" ]; then
		SERVICE="wayland"
	    else
		SERVICE="x11"
	    fi
	fi

	if [ "$SERVICE" = "video" ]; then
	    if [ -e /dev/video ]; then
		ADJUSTMENT_VOLS+=( "/dev/video:/dev/video" )
		#ADJUSTMENT_DEVS+=( "/dev/cameras/video0:/dev/video0" )
		#ADJUSTMENT_DEVS+=( "/dev/cameras/video1:/dev/video1" )
	    else
		echo "WARNING: system appear to be missing a udev setup for /dev/video that allows easy sharing of video devices with containers."
		echo "Hot-plugging of video devices while containers are running will not be supported."
		for DEV in /dev/video*; do
		    if [ -c "$DEV" ]; then
	    		ADJUSTMENT_DEVS+=( "$DEV:/dev/video/${DEV#/dev/}" )
	    	    fi
		done
	    fi
	    INIT_COMMANDS+=( "echo -n {0..9} | xargs -d ' '  -i ln -s /dev/video/video{} /dev/video{}" )
            ADJUSTMENT_CAPS+=( "CAP_SETUID" "CAP_SETGID" )

	elif [ "$SERVICE" = "wayland" ]; then
	    ADJUSTMENT_ENVS+=( "WAYLAND_DISPLAY: ${WAYLAND_DISPLAY}" )
	    ADJUSTMENT_VOLS+=( "${XDG_RUNTIME_DIR}/${WAYLAND_DISPLAY}:/tmp/${USER}/run/${WAYLAND_DISPLAY}:ro" )
	    ADJUSTMENT_ENVS+=( "CDC_OZONE_FLAG: --ozone-platform=wayland")
            ADJUSTMENT_ENVS+=( "QT_QPA_PLATFORM: wayland")
            ADJUSTMENT_ENVS+=( "XDG_SESSION_TYPE: wayland")

	elif [ "$SERVICE" = "x11" ]; then
	    ADJUSTMENT_ENVS+=( "DISPLAY: \"${DISPLAY}\"" "XAUTHORITY: \"${XAUTHORITY}\"" )
	    ADJUSTMENT_VOLS+=( "/tmp/.X11-unix:/tmp/.X11-unix:rw" "${XAUTHORITY}:${XAUTHORITY}:rw" )
	    ADJUSTMENT_ENVS+=( "CDC_OZONE_FLAG: --ozone-platform=x11")
            ADJUSTMENT_ENVS+=( "XDG_SESSION_TYPE: x11")

        elif [ "$SERVICE" = "dri-full" ]; then
            GLXINFO=$(glxinfo)
            if grep -q 'direct rendering: Yes' <<< "$GLXINFO" && grep -q 'OpenGL vendor string: NVIDIA' <<< "$GLXINFO"; then
                if [ ! -e /etc/cdi/nvidia.yaml -a ! -e /var/run/cdi/nvidia.yaml ]; then
                    echo "To support 'full-dri', this system needs a CDI configuration from the NVIDIA container toolkit, which is not detected!"
                    echo "Please install the nvidia-container-toolkit (if not already installed) and then generate a configration using this command:"
                    echo "  nvidia-ctk cdi generate | sudo tee cat > /etc/cdi/nvidia.yaml"
                    exit 1
                fi
                PODMAN_ARGS+=( "--device nvidia.com/gpu=all" )
                OVERRIDE_ALLOW_READ="yes"
            fi

	elif [ "$SERVICE" = "sound" ]; then
	    ADJUSTMENT_VOLS+=( "${XDG_RUNTIME_DIR}/pipewire-0:/tmp/${USER}/run/pipewire-0:rw" )
	    ADJUSTMENT_DEVS+=( "/dev/snd:/dev/snd" )

	elif [ "$SERVICE" == "dbus-proxy" ]; then
	    ARGUMENTS=( $(GET_FEATURE_ARG dbus-proxy) )
	    echo "Launching: xdg-dbus-proxy $DBUS_SESSION_BUS_ADDRESS $XDG_RUNTIME_DIR/bus-proxy-$APP-$ACTION $SYSTEM_ARGS"
	    xdg-dbus-proxy "$DBUS_SESSION_BUS_ADDRESS" "$XDG_RUNTIME_DIR/bus-proxy-$APP-$ACTION" "${ARGUMENTS[@]}" &
	    DBUS_PROXY_PID=$?
	    trap "kill $DBUS_PROXY_PID" EXIT
	    CDC_DBUS_PATH="$XDG_RUNTIME_DIR/bus-proxy-$APP-$ACTION"
            ADJUSTMENT_VOLS+=( "${CDC_DBUS_PATH}:/run/user/${UID}/bus:rw" )
	    ADJUSTMENT_ENVS+=( "DBUS_SESSION_BUS_ADDRESS: \"unix:path=/run/user/${UID}/bus\"" )

	elif [ "$SERVICE" == "dbus-system-proxy" ]; then
	    ARGUMENTS=( $(GET_FEATURE_ARG dbus-system-proxy) )
	    echo "Launching: xdg-dbus-proxy $DBUS_SYSTEM_BUS_ADDRESS $XDG_RUNTIME_DIR/bus-system-proxy-$APP-$ACTION $DBUS_SYSTEM_PROXY_ARGS"
	    xdg-dbus-proxy "$DBUS_SESSION_BUS_ADDRESS" "$XDG_RUNTIME_DIR/bus-proxy-$APP-$ACTION" "${ARGUMENTS[@]}" &
	    DBUS_SYSTEM_PROXY_PID=$?
	    trap "kill $DBUS_SYSTEM_PROXY_PID" EXIT
	    CDC_DBUS_SYSTEM_PATH="$XDG_RUNTIME_DIR/bus-proxy-$APP-$ACTION"
	    ADJUSTMENT_VOLS+=( "${CDC_DBUS_SYSTEM_PATH}:/run/dbus/system_bus_socket:rw" )
	    ADJUSTMENT_ENVS+=( "DBUS_SYSTEM_BUS_ADDRESS: \"unix:path=/run/user/${UID}/bus\"" )
	fi
    done
fi

cat <<EOF >> "$ADJUSTMENT_FILE"
services:
  $ACTION:
    container_name: "$CONTAINER_NAME"
EOF
if [ -n "$ADJUSTMENT_DEVS" ]; then
  cat <<EOF >> "$ADJUSTMENT_FILE"
    devices:
EOF
  for DEV in "${ADJUSTMENT_DEVS[@]}"; do
    echo "      - \"$DEV\"" >> "$ADJUSTMENT_FILE"
  done
fi

if [ -n "$ADJUSTMENT_VOLS" ]; then
  cat <<EOF >> "$ADJUSTMENT_FILE"
    volumes:
EOF
  for VOL in "${ADJUSTMENT_VOLS[@]}"; do
    echo "      - \"$VOL\"" >> "$ADJUSTMENT_FILE"
  done
fi

if [ -n "$ADJUSTMENT_ENVS" ]; then
  cat <<EOF >> "$ADJUSTMENT_FILE"
    environment:
EOF
  for ENV in "${ADJUSTMENT_ENVS[@]}"; do
    echo "      $ENV" >> "$ADJUSTMENT_FILE"
  done
fi

if [ -n "$ADJUSTMENT_CAPS" ]; then
  cat <<EOF >> "$ADJUSTMENT_FILE"
    cap_add:
EOF
  for CAP in "${ADJUSTMENT_CAPS[@]}"; do
    echo "      - \"$CAP\"" >> "$ADJUSTMENT_FILE"
  done
fi

CRUNVER="$(crun --version | awk '/crun version /{print $3}')"
if ! sort -C -V <<< $'1.9.1\n'"$CRUNVER"; then
    OVERRIDE_ALLOW_READ=yes
EOF
fi

if [ "$OVERRIDE_ALLOW_READ" == "yes" ]; then
    cat <<EOF >> "$ADJUSTMENT_FILE"
    read_only: false
EOF
fi


echo "==== ADJUSTMENT FILE ===="
cat "$ADJUSTMENT_FILE"
echo "======================="

# Alternative wayy of finding running container, but I prefer just going directly through podman
#RUNNING_NAME=$(podman-compose -f ./compose.yaml ps --format "{{.Names}}" | awk -F_ -vaction="$ACTION" '{if ($2 == action) { print $2} }')

export CDC_APP_DIR="$(pwd -P)"

RUNNING_ID="$(podman ps -qf "name=$CONTAINER_NAME")"
STOPPED_ID="$(podman ps -a -q -f "name=$CONTAINER_NAME")"
if [ -n "$RUNNING_ID" ]; then
    RUN_MODE="exec"
else
    if [ -n "$STOPPED_ID" ]; then
        podman rm "$STOPPED_ID"
    fi
    RUN_MODE="run"
    PODMAN_ARGS+=("--hostname \"$CDC_HOSTNAME\"")
    NAME_ARG="--name ${CONTAINER_NAME}"
    PODMAN_RUN_ARGS+=("--rm")
fi
echo "RUN_MODE $RUN_MODE (RUNNING ID: $RUNNING_ID - STOPPED_ID: $STOPPED_ID)"

LAUNCH_COMMAND=""
if [ "$(echo "$PODMAN_CONFIG" | yq -r ".services.\"$ACTION\".command")" != "null" ]; then
    LAUNCH_COMMAND="$(echo "$PODMAN_CONFIG" | yq -r ".services.\"$ACTION\".command | .[]")"
fi
if [ -z "$LAUNCH_COMMAND" -o "$LAUNCH_COMMAND" == "null" ]; then
    echo "No launch command defined for $APP $ACTION"
    exit 1
fi

#if [ -n "$RUNNING_ID" ]; then
#    echo "Container already running; starting process inside running container."
#    exec /usr/bin/env --split-string="podman-compose --env-file \"$CDC_APP_DIR/.env\" --in-pod false -f compose.yaml -f \"$ADJUSTMENT_FILE\" $CONFIG_FILE $PODMAN_RUN_ARGS exec ${RUN_USER_ARG} \"$ACTION\"" bash -c "$LAUNCH_COMMAND" bash "$@"
#    exit 1
#fi

PRELAUNCHER=""
TRAY="$(echo "$PODMAN_CONFIG" | yq -r ".services.\"$ACTION\".\"x-app-launcher\".tray")"
if [ -n "$TRAY" -a "$TRAY" != "null" ]; then
    TRAY_ICON="$(echo "$PODMAN_CONFIG" | yq -r ".services.\"$ACTION\".\"x-app-launcher\".tray.icon")"
    TRAY_NAME="$(echo "$PODMAN_CONFIG" | yq -r ".services.\"$ACTION\".\"x-app-launcher\".tray.name")"
    TRAY_WMCLASS="$(echo "$PODMAN_CONFIG" | yq -r ".services.\"$ACTION\".\"x-app-launcher\".tray.\"wmclass\"")"
    TRAY_WMCLASS_ARG=""
    if [ "$TRAY_WMCLASS" == "null" ]; then
        TRAY_WMCLASS_FILE="$(echo "$PODMAN_CONFIG" | yq -r ".services.\"$ACTION\".\"x-app-launcher\".tray.\"wmclass-file\"")"
        if [ "$TRAY_WMCLASS_FILE" != "null" ]; then
            TRAY_WMCLASS="$(cat "home/$TRAY_WMCLASS_FILE")"
            TRAY_WMCLASS_ARG="--wm-class $TRAY_WMCLASS"
        fi
    else
      TRAY_WMCLASS_ARG="--wm-class $TRAY_WMCLASS"
    fi
    PRELAUNCHER="\"${TOOLPATH}/../dependencies/submodules/tray-utils/bin/tray-wrapper\" --app-name \"$TRAY_NAME\" --icon \"home/$TRAY_ICON\" $TRAY_WMCLASS_ARG --"
else
    PRELAUNCHER=""
fi

if [ -n "$CDC_DEBUG" ]; then
    echo "=== CONFIG ==="
    podman-compose -f compose.yaml -f "$ADJUSTMENT_FILE" "${CONFIG_FILE[@]}" config
    echo "=============="
fi

#echo /usr/bin/env --split-string="${PRELAUNCHER} podman-compose  --env-file \"${CDC_APP_DIR}/.env\" --in-pod false -f compose.yaml -f \"${ADJUSTMENT_FILE}\" ${CONFIG_FILE} ${PODMAN_RUN_ARGS} run --name \"${CONTAINER_NAME}\" --rm \"${ACTION}\"" bash -c "${LAUNCH_COMMAND}" bash "$@"

# Handle changes between versions of podman in how to not create a pod
# (we need "--userns", which cannot be used in pods)
VERSION=$(podman-compose --version | awk '/podman-compose/{print $NF}')
if sort -CV <<< "1.2.0"$'\n'"$VERSION"; then
    NOPOD="--in-pod false"
else
    NOPOD=""
fi

#COMPOSE_PODMAN_ARGS=()
#for ARG in "${PODMAN_ARGS[@]}"; do
#    COMPOSE_PODMAN_ARGS+=("--podman-run-args" "\\${ARG}")
#done
if [ -n "${PODMAN_ARGS[0]}" ]; then
    ARGS=${PODMAN_ARGS[@]}
    COMPOSE_PODMAN_ARGS=("--podman-run-args" "\\$ARGS")
else
    COMPOSE_PODMAN_ARGS=()
fi

#if [ "$(echo "$PODMAN_CONFIG" | yq -r ".services.\"$ACTION\".\"x-run-dependencies\"")" != "null" ]; then
#    DEPS="$(echo "$PODMAN_CONFIG" | yq -r ".services.\"$ACTION\".\"x-run-dependencies\"[]")"
#    echo "Found dependenecies: $DEPS"
#
#    if [ "$RUN_MODE" != "exec" ]; then
#	echo ${PRELAUNCHER} podman-compose  --env-file "${CDC_APP_DIR}/.env" ${NOPOD} -f compose.yaml -f "${ADJUSTMENT_FILE}" "${CONFIG_FILE[@]}" "${COMPOSE_PODMAN_ARGS[@]}" "${RUN_MODE}" ${PODMAN_RUN_ARGS[@]} ${NAME_ARG} "${ACTION}" sleep infinity
#	RUN_MODE="exec"
#	NAME_ARG=""
#    fi
#
 #   for DEP in $DEPS; do
#	(
#	    echo "Launching dependency: $DEP"
#	    export CDC_PARENT_CONTAINER="$CONTAINER_NAME"
#            "${SCRIPTPATH}/cdc-launch" "$DEP"
#            unset CDC_PARENT_CONTAINER
#	)
#    done
#fi

INIT_COMMAND=""
if [ "${#INIT_COMMANDS[@]}" != "0" ]; then
    INIT_COMMAND="$(printf '%s;\n' "${INIT_COMMANDS[@]}")"
fi

if [ "$(echo "$PODMAN_CONFIG" | yq -r ".services.\"$ACTION\".\"x-app-launcher\".init")" != "null" ]; then
    INIT_COMMAND="${INIT_COMMAND}$(echo "$PODMAN_CONFIG" | yq -r ".services.\"$ACTION\".\"x-app-launcher\".init | .[]")"$'\n'
fi

#${PRELAUNCHER} podman-compose  --env-file "${CDC_APP_DIR}/.env" ${NOPOD} -f compose.yaml -f "${ADJUSTMENT_FILE}" "${CONFIG_FILE[@]}" "${COMPOSE_PODMAN_ARGS[@]}" config

# Applications that have a root-running init command, either manually configured, or because of selected features, need to start as root and then drop priviledges,
# this requires additional capabilities: CAP_SETUID and CAP_SETGID, so we only launch that way if necessay.

if [ -z "$INIT_COMMAND" -o "${RUN_MODE}" != "run" ]; then

    echo ${PRELAUNCHER} podman-compose  --env-file "${CDC_APP_DIR}/.env" ${NOPOD} -f compose.yaml -f "${ADJUSTMENT_FILE}" "${CONFIG_FILE[@]}" "${COMPOSE_PODMAN_ARGS[@]}" "${RUN_MODE}" --user "${RUN_USER}" ${PODMAN_RUN_ARGS[@]} $NAME_ARG "${ACTION}" "<launch command...>"
    ${PRELAUNCHER} podman-compose  --env-file "${CDC_APP_DIR}/.env" ${NOPOD} -f compose.yaml -f "${ADJUSTMENT_FILE}" "${CONFIG_FILE[@]}" "${COMPOSE_PODMAN_ARGS[@]}" "${RUN_MODE}" --user "${RUN_USER}" ${PODMAN_RUN_ARGS[@]} $NAME_ARG "${ACTION}" bash -c "${LAUNCH_COMMAND}" bash "$@"

else

    echo ${PRELAUNCHER} podman-compose  --env-file "${CDC_APP_DIR}/.env" ${NOPOD} -f compose.yaml -f "${ADJUSTMENT_FILE}" "${CONFIG_FILE[@]}" "${COMPOSE_PODMAN_ARGS[@]}" "${RUN_MODE}" --user root ${PODMAN_RUN_ARGS[@]} $NAME_ARG "${ACTION}" "<init and launch command...>"
    # Check if we are meant to update before launching

    AUTO_UPDATE="$(echo "$PODMAN_CONFIG" | yq -r ".services.\"$ACTION\".\"x-app-launcher\".\"auto-update\"")"
    if [ -z "$CDC_NO_RECURSE" -a -n "$AUTO_UPDATE" -a "$AUTO_UPDATE" != "null" -a "$ACTION" != "update-check" -a "$ACTION" != "download" -a "$ACTION" != "update" ]; then
        CDC_NO_RECURSE=1 "$SCRIPTPATH/cdc-update"
    fi

    # Note:
    # The launch part of this command isn't trivial to parse:
    # 1. The outermost execution takes the form: bash -c <command to run> bash <arguments>.
    # 2. <command to run> first exectures the root part: ${INIT_COMMAND}, and drops priviliges using gosu by running: HOME=<homedir> gosu ${RUN_USER} "$@"
    # 3. The commands executed by gosu "$@" are the complete list of arguments sent into the bash session, which is <arguments> in (1).
    # 4. <arguments> has been given the form: bash -c "${LAUNCH_COMMAND}" bash "$@", which thus executes another bash session with "${LAUNCH_COMMAND}" where the arguments are the outermost "$@"
    ${PRELAUNCHER} podman-compose  --env-file "${CDC_APP_DIR}/.env" ${NOPOD} -f compose.yaml -f "${ADJUSTMENT_FILE}" "${CONFIG_FILE[@]}" "${COMPOSE_PODMAN_ARGS[@]}" "${RUN_MODE}" --user root ${PODMAN_RUN_ARGS[@]} $NAME_ARG "${ACTION}" bash -c "${INIT_COMMAND} HOME='/home/$RUN_USER' exec gosu \"${RUN_USER}\" \"\$@\"" bash bash -c "${LAUNCH_COMMAND}; exit \$?" bash "$@"

fi
