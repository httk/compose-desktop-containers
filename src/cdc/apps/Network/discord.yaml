version: "3.8"

x-application:

  readme: |
    Discord: instant messaging and VoIP social platform.

    This container uses the x11 server on your desktop (i.e., likely xwayland if you are
    running Wayland), which is not great from a security barrier perspective.

    Use together with legacy-screenshare-helper (https://github.com/httk/legacy-screenshare-helper)
    to support screensharing.

  config-default: |
    version: "3.8"

    services:
      discord:
        volumes:
          - "${HOME}/Documents/containers/meetings:/home/${USER}/Documents/containers/meetings"
        working_dir: "/home/${USER}/Documents/containers/meetings"

  env-default: |
    # This container has no configurable options

x-launchers:
  download:
    service: setup
    type: setup

    # Discord doesn't keep track of versions via filenames. TODO: implement handling of this so old versions are kept.
    script: &download_script
      - echo "DOWNLOAD"
      - mkdir -p Downloads
      - curl -L -o Downloads/discord.tar.gz "https://discordapp.com/api/download?platform=linux&format=tar.gz"

  redownload:
    service: setup
    type: setup
    script: &redownload_script
      - echo "REDOWNLOAD"
      - rm -f Downloads/discord.tar.gz
      - *download_script

  install:
    service: setup-nonet
    type: setup
    script: &install_script
      - VERSION="$${1:-discord.tar.gz}";
      - echo "INSTALL $$VERSION";
      - rm -rf ~/.local/share/discord &&
        mkdir ~/.local/share/discord &&
        cd ~/.local/share/discord &&
        tar -xf ~/Downloads/"$$VERSION" &&
        mkdir -p ~/.local/share/applications &&
        cp Discord/discord.desktop ~/.local/share/applications/discord.desktop &&
        sed -i 's%/usr/share/discord/Discord%/home/$${USER}/discord/Discord/Discord%' ~/.local/share/applications/discord.desktop

  reinstall:
    service: setup-nonet
    type: setup
    script: &reinstall_script
      - VERSION="$${1:-discord.tar.gz}";
      - echo "REINSTALL $$VERSION"
      - rm -rf ~/.local/share/discord
      - *install_script

  update-check:
    service: setup
    type: setup
    script: &update_check_script
      - echo "UPDATE CHECK"
      - mkdir -p Downloads
      - if [ -e Downloads/discord.tar.gz ]; then
          LASTMOD_LINE="$$(curl -sI -L "https://discordapp.com/api/download?platform=linux&format=tar.gz" | grep -i '^Last-Modified:' | cut "-d:" -f2- | sed 's/^\s*\|\s$$//g')";
          if [ -z "$$LASTMOD_LINE" ]; then
            echo "Could not get last modified date";
            exit 0;
          fi;
          REMOTE_TS="$$(date -d "$${LASTMOD_LINE}" +%s)";
          LOCAL_TS="$$(date -r "Downloads/discord.tar.gz" +%s)";
          if [ "$$REMOTE_TS" -lt "$$LOCAL_TS" ]; then
            echo "No new version";
            exit 0;
          fi;
        fi
      - echo "File missing, or server-side file newer"
      - exit 1

  update:
    service: setup
    type: setup
    script:
      - echo "UPDATE"
      - *redownload_script
      - *reinstall_script

  discord:
    service: run
    type: background
    auto-update: true
    script:
      - echo "DISCORD"
      - pipewire-pulse &
      - exec ~/.local/share/discord/Discord/Discord $${CDC_OZONE_FLAGS} "$$@"

    desktop:

      file: |
        [Desktop Entry]
        Name=Discord (container)
        StartupWMClass=discord
        Comment=Internet Messenger
        Exec=discord %U
        Terminal=false
        Type=Application
        Icon=discord
        Categories=Network;InstantMessaging;
        MimeType=x-scheme-handler/discord;

      icons:
        - source: Installation/Discord/discord.png
          size: 256
          dest: discord.png

  discord-force-wayland:
    service: run-wayland
    type: background
    script:
      - echo "DISCORD"
      - pipewire-pulse &
      - exec ~/.local/share/discord/Discord/Discord $${CDC_OZONE_FLAGS} "$$@"


  interactive:
    service: run
    console: true
    script:
      - echo "INTERACTIVE"
      - bash


services:

  common: &common

    image: "cdc-u24"

    entrypoint: ["/bin/tini", "/bin/bash", "--", "-c", "$$(printf \"%s\\n\" \"$@\"); sleep infinity"]
    network_mode: none

    working_dir: /home/$USER
    user: "${USER}"

    environment: &common-env
      LANG: "${LANG}"
      XDG_RUNTIME_DIR: "/tmp/${USER}/run"
      XDG_CURRENT_DESKTOP: "${XDG_CURRENT_DESKTOP}"
      DESKTOP_SESSION: "${DESKTOP_SESSION}"

    cap_drop:
      - ALL

    cap_add:
      - SYS_CHROOT
      - CAP_SETUID
      - CAP_SETGID

    security_opt:
      - no-new-privileges

    read_only: true
    tmpfs:
      - /tmp
      - /run

    shm_size: "1G"

    volumes:
      - "${CDC_APP_PATH}/home:/home/${USER}:rw"

    devices:
      - "/dev/dri:/dev/dri"

    security_opt:
      - no-new-privileges

    userns_mode: "keep-id"

  setup:
    <<: *common

    network_mode: bridge

  setup-nonet:
    <<: *common

    network_mode: none

  run:
    <<: *common

    network_mode: bridge

    x-features:
      - video
      - sound
      - x11

# I'm not getting this to run on Wayland, it dies with 'render-process-gone { reason: 'crashed', exitCode: 139 }'

  run-wayland:
    <<: *common

    network_mode: bridge

    x-features:
      - video
      - sound
      - wayland
