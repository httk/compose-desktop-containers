version: "3.8"

x-application:

  readme: |
    Spotify-client: client for the audio streaming and media service provider Spotify

  override-default: |
    version: "3.8"

    services:
      slack:
         volumes:
           - "${HOME}/Documents/containers/music:/home/${USER}/Documents/containers/music"
         working_dir: "/home/${USER}/Documents/containers/music"

  env-default: |
    # No configurable options

x-launchers:
  download:
    service: setup
    type: setup

    script: &download_script
      - echo "DOWNLOAD"
      - mkdir -p Downloads
      - LATESTURL="http://repository.spotify.com/pool/non-free/s/spotify-client/$(curl -L 'http://repository.spotify.com/pool/non-free/s/spotify-client/' | sed -n 's|^.*"\(spotify-client_.\+_amd64\.deb\)".*$|\1|p' | sort --version-sort | tail -n 1)"
      - LATESTFILENAME="$${LATESTURL##*/}"
      - if [ -z "$$LATESTFILENAME" ]; then
          echo "Failed to determine latest version.";
          exit 1;
        fi;
      - curl -L -o Downloads/$$LATESTFILENAME "$$LATESTURL" && ln -sf $$LATESTFILENAME Downloads/spotify-client_latest_amd64.deb

  redownload:
    service: setup
    type: setup
    script: &redownload_script
      - echo "REDOWNLOAD"
      - rm -f "$$(readlink -f Downloads/spotify-client_latest_amd64.deb)"
      - rm -f Downloads/spotify-client_latest_amd64.deb
      - *download_script

  install:
    service: setup-nonet
    type: setup
    script: &install_script
      - VERSION="$${1:-spotify-client_latest_amd64.deb}";
      - echo "INSTALL $$VERSION";
      - rm -rf ~/.local/share/spotify
      - mkdir -p ~/.local/share/spotify/tmp &&
        cd ~/.local/share/spotify/tmp &&
        dpkg-deb -x ~/Downloads/"$$VERSION" spotify &&
        mv spotify/usr/share/spotify/* ~/.local/share/spotify/. &&
        mkdir -p ~/.local/share/applications ~/.local/share/icons/hicolor/256x256/apps &&
        cp ~/.local/share/spotify/spotify.desktop ~/.local/share/applications/spotify.desktop &&
        sed -i 's%/usr/bin/spotify%/home/${USER}/Installation/spotify/usr/bin/spotify%' ~/.local/share/applications/spotify.desktop &&
        for ICON in ~/.local/share/spotify/icons/spotify-linux-*.png; do
          SIZE=$${ICON#*/spotify/icons/spotify-linux-};
          SIZE=$${SIZE%.png};
          mkdir -p ~/.local/share/icons/hicolor/"$${SIZE}x$${SIZE}"/apps;
          cp $$ICON ~/.local/share/icons/hicolor/"$${SIZE}x$${SIZE}"/apps/spotify-linux.png;
        done &&
        gtk-update-icon-cache -f -t ~/.local/share/icons/hicolor &&
        update-desktop-database ~/.local/share/applications/ &&
        rm -rf ~/.local/share/spotify/tmp


  reinstall:
    service: setup-nonet
    type: setup
    script: &reinstall_script
      - VERSION="$${1:-spotify-client_latest_amd64.deb}";
      - echo "REINSTALL $$VERSION"
      - rm -rf ~/.local/share/spotify
      - *install_script

  update-check:
    service: setup
    type: setup
    script: &update_check_script
      - echo "UPDATE CHECK"
      - LATESTURL="http://repository.spotify.com/pool/non-free/s/spotify-client/$(curl -L 'http://repository.spotify.com/pool/non-free/s/spotify-client/' | sed -n 's|^.*"\(spotify-client_.\+_amd64\.deb\)".*$|\1|p')"
      - LATESTFILENAME="$${LATESTURL##*/}";
      - if [ -z "$$LATESTFILENAME" ]; then
          echo "Failed to determine latest version.";
          exit 1;
      - fi
      - mkdir -p Downloads
      - if [ -e "Downloads/$$LATESTFILENAME" ]; then
          echo "No new version";
          exit 0;
        fi
      - echo "File missing, or server-side file newer"
      - exit 1

  update:
    service: setup
    type: setup
    script:
      - echo "UPDATE"
      - *redownload_script
      - *reinstall_script

  spotify:
    service: run
    type: background
    script:
      - echo "SPOTIFY"
      - pipewire-pulse &
      - exec ~/.local/share/spotify/spotify $${CDC_OZONE_FLAGS} "$$@"

    desktop:

      file: |
        [Desktop Entry]
        Type=Application
        Name=Spotify (container)
        StartupWMClass=spotify
        GenericName=Music Player
        Icon=spotify-linux
        Exec=spotify %U
        Terminal=false
        MimeType=x-scheme-handler/spotify;
        Categories=Audio;Music;Player;AudioVideo;

      icons:
        - source: spotify-linux.png
          dest: spotify-linux.png

#  spotify-force-wayland:
#    service: run-wayland
#    type: background
#    script:
#      - echo "SPOTIFY"
#      - pipewire-pulse &
#      - |
#        if [ -n "$WAYLAND_DISPLAY" ]; then
#          export TMPDIR="$$CDC_HOSTTMP_PATH" # this ugly workaround allows appindicator icons to be accessed by the host system
#        fi
#      - exec ~/.local/share/spotify/spotify $${CDC_OZONE_FLAGS} "$$@"

  interactive:
    service: run
    console: true
    script:
      - echo "INTERACTIVE"
      - bash


services:

  common: &common

    image: "cdc-u24"

    entrypoint: ["/cdc/entrypoint"]
    network_mode: none

    working_dir: /home/$USER
    user: "${USER}"

    environment: &common-env
      LANG: "${LANG}"
      XDG_RUNTIME_DIR: "/tmp/${USER}/run"
      XDG_CURRENT_DESKTOP: "${XDG_CURRENT_DESKTOP}"
      DESKTOP_SESSION: "${DESKTOP_SESSION}"

    cap_drop:
      - ALL

    cap_add:
      - SYS_CHROOT

    security_opt:
      - no-new-privileges

    read_only: true
    tmpfs:
      - /tmp
      - /run

    shm_size: "1G"

    volumes:
      - "${CDC_APP_PATH}/home:/home/${USER}:rw"

    devices:
      - "/dev/dri:/dev/dri"

    security_opt:
      - no-new-privileges

    userns_mode: "keep-id"

  setup:
    <<: *common

    network_mode: bridge

  setup-nonet:
    <<: *common

    network_mode: none

  run:
    <<: *common

    network_mode: bridge

    x-features:
      - video
      - sound
      - wayland-fallback-x11
      - dbus-proxy: --filter --own=org.mpris.MediaPlayer2.spotify --call="org.freedesktop.portal.*=*" --talk=org.gnome.SettingsDaemon.MediaKeys --talk=org.kde.StatusNotifierWatcher


#  run-wayland:
#    <<: *common
#
#    network_mode: bridge
#
#    x-features:
#      - video
#      - sound
#      - wayland
#      - wayland-host-tmp-mount
#      - dbus-proxy: --filter --own=org.mpris.MediaPlayer2.spotify --call="org.freedesktop.portal.*=*" --talk=org.gnome.SettingsDaemon.MediaKeys --talk=org.kde.StatusNotifierWatcher
