#!/bin/bash

set -e

SCRIPTPATH="$(dirname -- "$(realpath -- "$0")")"
DEST_ABSPATH="$(cd -- "$DEST"; pwd -P)"
CDC_CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/cdc"

if ! yq -r '."x-application"' compose.yaml > /dev/null 2>&1 || [ "$(yq -r '."x-application"' compose.yaml 2>/dev/null)" == "null" ]; then

    echo "=== Error dump ==="
    yq -r '."x-application"' compose.yaml && true
    echo "=================="

    echo "The file compose.yaml in this directory does not seem to be a valid compose-desktop-container yaml file."
    exit 1
fi

PODMAN_CONFIG=$(podman-compose -f compose.yaml config 2>/dev/null || true)

if [ ! -e override.yaml ]; then
    if [ "$(yq -r '."x-application"."override-default"' compose.yaml)" != "null" ]; then
	yq -r '."x-application"."override-default"' compose.yaml > override.yaml
    else
	cat <<EOF > override.yaml
version: "3.8"
EOF
    fi
fi

if [ ! -e .env ]; then
    if [ "$(echo "$PODMAN_CONFIG" | yq -r '."x-application"."env-default"')" != "null" ]; then
	yq -r '."x-application"."env-default"' compose.yaml > .env
    else
	cat <<EOF > .env
# No configurable options
EOF
    fi
    if [ ! -e env ]; then
	ln -s .env env
    fi
fi

if [ "$(echo "$PODMAN_CONFIG" | yq -r '."x-application"."readme"')" != "null" ]; then
    yq -r '."x-application"."readme"' compose.yaml > README.md
else
    cat <<EOF > README.md
This app is missing a README.
EOF
fi

if [ -z "$1" ]; then
    (
        export CDC_LAUNCH_SILENT=1
        "$SCRIPTPATH/cdc-launch" "redownload" || "$SCRIPTPATH/cdc-launch" "download" || true
        "$SCRIPTPATH/cdc-launch" "rebuild" || "$SCRIPTPATH/cdc-launch" "build" || true
        "$SCRIPTPATH/cdc-launch" "reinstall" || "$SCRIPTPATH/cdc-launch" "install" || true
    )
else
    (
        export CDC_LAUNCH_SILENT=1
        "$SCRIPTPATH/cdc-launch" "redownload" "$1" || "$SCRIPTPATH/cdc-launch" "download" "$1" || true
        "$SCRIPTPATH/cdc-launch" "rebuild" "$1" || "$SCRIPTPATH/cdc-launch" "build" "$1" || true
        "$SCRIPTPATH/cdc-launch" "reinstall" "$1" || "$SCRIPTPATH/cdc-launch" "install" "$1" || true
    )
fi

"$SCRIPTPATH/cdc-host-integration"

LABEL="$(echo "$PODMAN_CONFIG" | yq -r '."x-application".label')"
if [ -n "$LABEL" -a "$(echo "$PODMAN_CONFIG" | yq -r '."x-application".images')" != "null" ]; then
    for image in $(echo "$PODMAN_CONFIG" | yq -r '.["x-application"].images | keys[]'); do
        rm "${CDC_CONFIG_DIR}/image-${image}/requested/${LABEL}"/100-pkgs "${CDC_CONFIG_DIR}/image-${image}/requested/${LABEL}"/100-pkgs-only "${CDC_CONFIG_DIR}/image-${image}/requested/${LABEL}"/100-commands "${CDC_CONFIG_DIR}/image-${image}/requested/${LABEL}"/100-precommands
        for ENTRY in $(echo "$PODMAN_CONFIG" | yq -r ".\"x-application\".images.${image}.pkgs[]"); do
            echo "$ENTRY" >> "${CDC_CONFIG_DIR}/image-${image}/requested/${LABEL}"/100-pkgs
        done
        for ENTRY in $(echo "$PODMAN_CONFIG" | yq -r ".\"x-application\".images.${image}.\"pkgs-only\"[]"); do
            echo "$ENTRY" >> "${CDC_CONFIG_DIR}/image-${image}/requested/${LABEL}"/100-pkgs-only
        done
        for ENTRY in $(echo "$PODMAN_CONFIG" | yq -r ".\"x-application\".images.${image}.\"commands\"[]"); do
            echo "$ENTRY" >> "${CDC_CONFIG_DIR}/image-${image}/requested/${LABEL}"/100-commands
        done
        for ENTRY in $(echo "$PODMAN_CONFIG" | yq -r ".\"x-application\".images.${image}.\"precommands\"[]"); do
            echo "$ENTRY" >> "${CDC_CONFIG_DIR}/image-${image}/requested/${LABEL}"/100-precommands
        done
  done
fi
