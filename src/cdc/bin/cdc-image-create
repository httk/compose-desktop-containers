#!/bin/bash

set -e

IMAGE="u24"

SCRIPTPATH="$(dirname -- "$(realpath -- "$0")")"
IMAGE_DIR="$(realpath -- "$SCRIPTPATH/../images")"
CDC_CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/cdc"

if [ -z "$USER" -o -z "$UID" -o -z "$LANG" ]; then
    echo "The following env variables must be set: USER, UID, LANG"
    exit 1
fi

# The sed 's/.utf8/.UTF-8/' fixes incorrectly specified locales from pre-GNOME 3.18 I think.
LOCALES="$(locale -a | grep -v "POSIX" | sed 's/.utf8/.UTF-8/' | tr '\n' ' ')"

PKGS_FILES=""
PKGS_NORECS_FILES=""
COMMANDS_FILES=""
PRECOMMANDS_FILES=""

CDC_CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/cdc"
mkdir -p "$CDC_CONFIG_DIR/image-u24/build/files" "$CDC_CONFIG_DIR/image-u24/build/tools"
mkdir -p "$CDC_CONFIG_DIR/image-u24/installed"
mkdir -p "$CDC_CONFIG_DIR/image-u24/requested/default"

(
    cd "$IMAGE_DIR"/image-"$IMAGE"/requested
    for FILE in *; do
        if [ ! -e  "$CDC_CONFIG_DIR/image-u24/requested/default/${FILE}.disabled" -a "${FILE%\~}" = "${FILE}" ]; then
            cp "$FILE" "$CDC_CONFIG_DIR/image-u24/requested/default/."
        fi
    done
)

if [ ! -e  "$CDC_CONFIG_DIR/image-u24/requested/default/50-commands-time.disabled" ]; then
  LOCALTIME=$(readlink /etc/localtime)
  if [ -n "$LOCALTIME" ]; then
      TZ_LOCATION="${LOCALTIME##*/}"
      TZ_AREA="${LOCALTIME%/*}"
      TZ_AREA="${TZ_AREA##*/}"
      echo "RUN ln -sf \"/usr/share/zoneinfo/${TZ_AREA}/${TZ_LOCATION}\" /etc/localtime" > "$CDC_CONFIG_DIR/image-u24/requested/default/50-commands-time"
  else
      cp /etc/localtime files/localtime
      echo "RUN rm -f /etc/localtime" > "$CDC_CONFIG_DIR/image-u24/requested/default/50-commands-time"
      echo "COPY files/localtime /etc/localtime" >> "$CDC_CONFIG_DIR/image-u24/requested/default/50-commands-time"
  fi
fi

if [ ! -e  "$CDC_CONFIG_DIR/image-u24/requested/default/51-commands-locale.disabled" ]; then
  cat > "$CDC_CONFIG_DIR/image-u24/requested/default/51-commands-locale" <<EOF
COPY ./tools/en_SE.locale /tmp/en_SE.locale
RUN test ! -e /usr/share/i18n/locales/en_SE && cp /tmp/en_SE.locale /usr/share/i18n/locales/en_SE && localedef -i en_SE -f UTF-8 en_SE.UTF-8 && echo "# en_SE.UTF-8 UTF-8" >> "/etc/locale.gen" && echo "en_SE.UTF-8 UTF-8" >> "/usr/share/i18n/SUPPORTED"
RUN locale-gen ${LOCALES} && update-locale "LANG=$LANG"
ENV LANG $LANG
RUN groupadd -r -g 5000 build && useradd -m -u 5000 -g 5000 -c "Build user" "build"
EOF
fi

FULLNAME="$(getent passwd rar | awk -F':' '{print $5}')"

if [ ! -e  "$CDC_CONFIG_DIR/image-u24/requested/default/52-commands-user.disabled" ]; then
  # We need to handle the user part differently depnding on if it overlaps the default 1000 user or not.
  if [ "$UID" == "1000" ]; then

    cat > "$CDC_CONFIG_DIR/image-u24/requested/default/52-commands-user" <<EOF
RUN usermod -l "$USER" ubuntu && groupmod -n "$USER" ubuntu && usermod -d "/home/$USER" -m "$USER" && usermod -c "$FULLNAME" "$USER" && mkdir /tmp/$USER && chown "$USER:$USER" "/tmp/$USER" && chmod 0700 "/tmp/$USER" && mkdir "/tmp/$USER/run" && chown "$USER:$USER" "/tmp/$USER/run" && chmod 0700 "/tmp/$USER/run"
EOF

  else

    cat > "$CDC_CONFIG_DIR/image-u24/requested/default/52-commands-user" <<EOF
RUN groupadd -r -g "$UID" "$USER" && useradd -m -u "$UID" -g "$UID" -c "$FULLNAME" "$USER" && mkdir /tmp/$USER && chown "$USER:$USER" "/tmp/$USER" && chmod 0700 "/tmp/$USER" && mkdir "/tmp/$USER/run" && chown "$USER:$USER" "/tmp/$USER/run" && chmod 0700 "/tmp/$USER/run"
EOF

  fi
  cat >> "$CDC_CONFIG_DIR/image-u24/requested/default/52-commands-user" <<EOF
RUN mkdir -p /run/user && ln -s "/tmp/$USER/run" "/run/user/${UID}"
EOF
fi

PKGS=()
PKGS_NORECS=()
COMMANDS=()
PRECOMMANDS=()

#if [ -n "$(ls "$CDC_CONFIG_DIR/image-u24/installed")" ]; then
#    for APP_DIR in "$CDC_CONFIG_DIR"/image-u24/installed/*; do
#	echo "Checking image dependencies in $APP_DIR"
#	PKGS=( $(yq -r '."x-application".images.u24.pkgs[]? // empty' "$APP_DIR/compose.yaml") )
#	echo "Picked up pkgs:" "${PKGS[@]}"
#	PKGS_NORECS=( $(yq -r '."x-application".images.u24."pkgs-norecs[]?" // empty' "$APP_DIR/compose.yaml") )
#	echo "Picked up pkgs to be installed without recommendeds:" "${PKGS_NORECS[@]}"
#	PRECOMMANDS=( $(yq -r '."x-application".images.u24.precommands[]? // empty' "$APP_DIR/compose.yaml") )
#	echo "Picked up pre-commands:" "${PRECOMMANDS[@]}"
#	COMMANDS=( $(yq -r '."x-application".images.u24.commands[]? // empty' "$APP_DIR/compose.yaml") )
#	echo "Picked up commands:" "${COMMANDS[@]}"
#    done
#fi

IFS=$'\n'
PKGS+=( $(ls "$CDC_CONFIG_DIR"/image-u24/requested/*/*-pkgs* 2>/dev/null | grep -v "~" | sort -s -t- -k1,1n -k2 | xargs cat) )
PKGS_NORECS+=( $(ls "$CDC_CONFIG_DIR"/image-u24/requested/*/*-pkgs-norecs* 2>/dev/null | grep -v "~" | sort -s -t- -k1,1n -k2 | xargs cat) )
COMMANDS+=( $(ls "$CDC_CONFIG_DIR"/image-u24/requested/*/*-commands* 2>/dev/null | grep -v "~" | sort -s -t- -k1,1n -k2 | xargs cat) )
PRECOMMANDS+=( $(ls "$CDC_CONFIG_DIR"/image-u24/requested/*/*-precommands* 2>/dev/null | grep -v "~" | sort -s -t- -k1,1n -k2 | xargs cat) )
IFS=' '

if [ -n "${PKGS}" ]; then
    PKGS_LINES="RUN apt-get -y install $(printf "%s\n" "${PKGS[@]}" | sort -u | tr '\n' ' ')"
fi
if [ -n "${PKGS_NORECS}" ]; then
    PKGS_NORECS_LINES="RUN apt-get --no-install-recommends -y install $(printf "%s\n" "${PKGS_NORECS[@]}" | sort -u | tr '\n' ' ')"
fi
if [ -n "${COMMANDS}" ]; then
    COMMANDS_LINES="$(printf "%s\n" "${COMMANDS[@]}")"
fi
if [ -n "${PRECOMMANDS}" ]; then
    PRECOMMANDS_LINES="$(printf "%s\n" "${PRECOMMANDS[@]}")"
fi

## Collect necessary files and tools in the build context directory
mkdir -p files
cp /etc/timezone "$CDC_CONFIG_DIR/image-u24/build/files"
cp -rp "${IMAGE_DIR}/image-${IMAGE}/tools"/* "${CDC_CONFIG_DIR}/image-u24/build/tools/."

## Create containerfile
cat > "$CDC_CONFIG_DIR/image-u24/build/Containerfile" <<EOF
$PRECOMMANDS_LINES
$PKGS_NOREC_LINES
$PKGS_LINES
$COMMANDS_LINES
EOF

cd "$CDC_CONFIG_DIR/image-u24/build/"
podman build --squash -t cdc-u24 --label=wrap .
podman image prune -f --filter label=wrap

rm -rf "$CDC_CONFIG_DIR/image-u24/installed"
cp -rp "$CDC_CONFIG_DIR/image-u24/requested" "$CDC_CONFIG_DIR/image-u24/installed"

echo "First run of new container (this may take a long time as podman may need to remap uid/gid manually)"
podman run --rm -w "/home/$USER" --user="$USER" --shm-size=1G --cap-drop=ALL --read-only --read-only-tmpfs --userns=keep-id --name "cdc_test_u24" cdc-u24 echo "Container finished."
