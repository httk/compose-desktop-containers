#!/usr/bin/env python3
import gi
gi.require_version('AppIndicator3', '0.1')
from gi.repository import AppIndicator3, Gtk, GObject, GdkPixbuf

from Xlib import display, X
import subprocess
import time
import os

# Force Gtk to use X11
os.environ['GDK_BACKEND'] = 'x11'

class AppIndicatorWrapper:
    def __init__(self, cmd):
        self.cmd = cmd
        self.indicator = AppIndicator3.Indicator.new(
            "appindicator-wrapper",
            "application-exit",
            AppIndicator3.IndicatorCategory.APPLICATION_STATUS
        )
        self.indicator.set_status(AppIndicator3.IndicatorStatus.ACTIVE)

        # Create menu
        self.menu = Gtk.Menu()
        item_toggle = Gtk.MenuItem(label="Show/Focus Program")
        item_toggle.connect("activate", self.on_toggle)
        self.menu.append(item_toggle)

        item_quit = Gtk.MenuItem(label="Quit Wrapper")
        item_quit.connect("activate", self.on_quit)
        self.menu.append(item_quit)
        self.menu.show_all()
	
	self.launch_process()
	
        self.indicator.set_menu(self.menu)

    def launch_process(self):
        self.process = subprocess.Popen(self.cmd)
        self.pid = self.process.pid
        time.sleep(2)
        self.window_id = self.find_window_by_pid(self.pid)  	

    def find_window_by_pid(self, pid):
        # Use wmctrl to find the window
        try:
            output = subprocess.check_output(["wmctrl", "-lp"], universal_newlines=True)
            for line in output.splitlines():
                parts = line.split(None, 4)
                if len(parts) >= 3:
                    w_pid = parts[2]
                    if w_pid.isdigit() and int(w_pid) == pid:
                        return int(parts[0], 16)  # Return window ID as int
        except Exception as e:
            print(f"Error finding window by pid: {e}")
        return None

    def on_toggle(self, source):
        if self.process.poll() is not None:
	    self.launch_process()
	self.bring_window_to_front()

    def bring_window_to_front(self):
        if self.window_id:
            subprocess.run(["wmctrl", "-ia", hex(self.window_id)], check=False)

    def on_quit(self, source):
        Gtk.main_quit()


def main():
    import argparse
    parser = argparse.ArgumentParser(description="AppIndicator with application icon")
    parser.add_argument("cmd", nargs='+', help="Command to launch the application")
    args = parser.parse_args()

    GObject.threads_init()
    app = AppIndicatorWrapper(cmd=args.cmd)
    Gtk.main()


if __name__ == "__main__":
    main()

