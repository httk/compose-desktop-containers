#!/usr/bin/env python3



import gi
gi.require_version('AppIndicator3', '0.1')
from gi.repository import AppIndicator3, Gtk, GObject
from Xlib import display, X
from Xlib.protocol import event
import subprocess
import time
import os

# Force Gtk to use X11
os.environ['GDK_BACKEND'] = 'x11'


class AppIndicatorWrapper:
    def __init__(self, cmd, icon=None):
        self.cmd = cmd
        self.icon = icon
        self.indicator = AppIndicator3.Indicator.new(
            "appindicator-wrapper",
            "application-exit",
            AppIndicator3.IndicatorCategory.APPLICATION_STATUS
        )
        self.indicator.set_status(AppIndicator3.IndicatorStatus.ACTIVE)

        # Set icon if provided
        if self.icon:
            self.indicator.set_icon(self.icon)

        # Create menu
        self.menu = Gtk.Menu()
        item_toggle = Gtk.MenuItem(label="Show/Focus Program")
        item_toggle.connect("activate", self.on_toggle)
        self.menu.append(item_toggle)

        item_quit = Gtk.MenuItem(label="Quit Wrapper")
        item_quit.connect("activate", self.on_quit)
        self.menu.append(item_quit)
        self.menu.show_all()

        self.indicator.set_menu(self.menu)

        self.launch_process()

    def launch_process(self):
        self.process = subprocess.Popen(self.cmd)
        self.pid = self.process.pid
        time.sleep(2)
        self.window_id = self.find_window_by_pid(self.pid)
        if self.window_id:
            self.minimize_window()

    def find_window_by_pid(self, pid):
        try:
            output = subprocess.check_output(["wmctrl", "-lp"], universal_newlines=True)
            for line in output.splitlines():
                parts = line.split(None, 4)
                if len(parts) >= 3:
                    w_pid = parts[2]
                    if w_pid.isdigit() and int(w_pid) == pid:
                        return int(parts[0], 16)  # Return window ID as int
        except Exception as e:
            print(f"Error finding window by pid: {e}")
        return None

    def minimize_window(self):
        if self.window_id:
            try:
                # Minimize the window using xdotool
                subprocess.run(["xdotool", "windowminimize", str(self.window_id)], check=False)

                # Further attempt to hide the window
                self.set_window_state("_NET_WM_STATE_HIDDEN")
                self.unmap_window()
            except Exception as e:
                print(f"Error minimizing window: {e}")

    def unmap_window(self):
        try:
            d = display.Display()
            window = d.create_resource_object('window', self.window_id)
            window.unmap()
            d.flush()
        except Exception as e:
            print(f"Error unmapping window: {e}")

    def set_window_state(self, state):
        try:
            d = display.Display()
            root = d.screen().root
            atom = d.intern_atom(state, True)
            window = d.create_resource_object('window', self.window_id)
            net_wm_state = d.intern_atom("_NET_WM_STATE", True)
            message = event.ClientMessage(
                window=window,
                client_type=net_wm_state,
                data=(32, [1, atom, 0, 0, 0])  # 1 for adding the state
            )
            root.send_event(
                message,
                event_mask=X.SubstructureRedirectMask | X.SubstructureNotifyMask
            )
            d.flush()
        except Exception as e:
            print(f"Error setting window state: {e}")

    def is_minimized(self):
        # Check if the window is minimized using `wmctrl`
        try:
            output = subprocess.check_output(["wmctrl", "-l"], universal_newlines=True)
            for line in output.splitlines():
                if hex(self.window_id) in line:
                    # If the window is listed, it's not minimized
                    return False
            return True
        except Exception as e:
            print(f"Error checking window state: {e}")
            return False

    def on_toggle(self, source):
        if self.process.poll() is not None:
            self.launch_process()
        elif self.is_minimized():
            self.unminimize_and_focus()
        else:
            self.minimize_window()

    def unminimize_and_focus(self):
        if self.window_id:
            try:
                # Unminimize the window
                subprocess.run(["xdotool", "windowmap", str(self.window_id)], check=False)

                # Bring it to the front
                subprocess.run(["xdotool", "windowactivate", "--sync", str(self.window_id)], check=False)
            except Exception as e:
                print(f"Error unminimizing and focusing window: {e}")

    def on_quit(self, source):
        Gtk.main_quit()


def main():
    import argparse
    parser = argparse.ArgumentParser(description="AppIndicator with application icon")
    parser.add_argument("--icon", help="Path to PNG icon for the tray")
    parser.add_argument("cmd", nargs='+', help="Command to launch the application")
    args = parser.parse_args()

    GObject.threads_init()
    app = AppIndicatorWrapper(cmd=args.cmd, icon=args.icon)
    Gtk.main()


if __name__ == "__main__":
    main()

