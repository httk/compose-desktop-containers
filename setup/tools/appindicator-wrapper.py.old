#!/usr/bin/env python3
import gi
gi.require_version('AppIndicator3', '0.1')
from gi.repository import AppIndicator3, Gtk, GObject

import argparse
import os
import signal
import subprocess
import sys

class AppIndicatorWrapper:
    def __init__(self, cmd, window_class=None, icon_name='application-exit'):
        self.cmd = cmd
        self.window_class = window_class
        self.icon_name = icon_name
        self.indicator = AppIndicator3.Indicator.new(
            "appindicator-wrapper",
            self.icon_name,
            AppIndicator3.IndicatorCategory.APPLICATION_STATUS
        )
        
        self.indicator.set_status(AppIndicator3.IndicatorStatus.ACTIVE)
        
        # Create a menu with one item "Toggle Program"
        self.menu = Gtk.Menu()
        
        item_toggle = Gtk.MenuItem(label="Toggle Program")
        item_toggle.connect("activate", self.on_toggle)
        self.menu.append(item_toggle)
        
        item_quit = Gtk.MenuItem(label="Quit Wrapper")
        item_quit.connect("activate", self.on_quit)
        self.menu.append(item_quit)
        
        self.menu.show_all()
        
        self.indicator.set_menu(self.menu)
        
        # Track the running program
        self.pid = None
        self.process = None

    def on_toggle(self, source):
        # Check if program is running
        if self.is_program_running():
            # Bring window to front if possible
            self.bring_window_to_front()
        else:
            # Start the program
            self.start_program()

    def start_program(self):
        try:
            self.process = subprocess.Popen(self.cmd)
            self.pid = self.process.pid
        except Exception as e:
            print(f"Failed to start program: {e}")

    def is_program_running(self):
        if self.pid is None:
            return False
        # Check if we can signal the process
        try:
            os.kill(self.pid, 0)
            return True
        except OSError:
            return False

    def bring_window_to_front(self):
        # If we have a window_class, we can directly try:
        # wmctrl -x -a <window_class>
        # If not, find the window by pid.
        if self.window_class:
            cmd = ["wmctrl", "-x", "-a", self.window_class]
            try:
                subprocess.run(cmd, check=False)
            except Exception as e:
                print(f"Failed to bring window to front: {e}")
        else:
            # No window class, try to find the window by PID
            window_id = self.find_window_by_pid(self.pid)
            if window_id:
                cmd = ["wmctrl", "-ia", window_id]
                try:
                    subprocess.run(cmd, check=False)
                except Exception as e:
                    print(f"Failed to bring window to front by pid: {e}")
            else:
                print("Could not find a window associated with PID:", self.pid)

    def find_window_by_pid(self, pid):
        # wmctrl -lp lists: WID DESK PID HOSTNAME TITLE
        # We need to find a line with our PID.
        try:
            output = subprocess.check_output(["wmctrl", "-lp"], universal_newlines=True)
            for line in output.splitlines():
                parts = line.split(None, 4)
                # parts: [window_id, desktop, pid, hostname, title]
                if len(parts) >= 3:
                    w_pid = parts[2]
                    if w_pid.isdigit() and int(w_pid) == pid:
                        # Found the matching window
                        window_id = parts[0]
                        return window_id
        except Exception as e:
            print(f"Error finding window by pid: {e}")
        return None

    def on_quit(self, source):
        Gtk.main_quit()


def main():
    parser = argparse.ArgumentParser(description="AppIndicator Wrapper")
    parser.add_argument("--class", dest="window_class", help="Window class of the application (for wmctrl)")
    parser.add_argument("cmd", nargs='+', help="Command to launch the application")
    args = parser.parse_args()

    GObject.threads_init()
    app = AppIndicatorWrapper(cmd=args.cmd, window_class=args.window_class)
    Gtk.main()

if __name__ == "__main__":
    main()
    
